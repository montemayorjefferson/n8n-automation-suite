{
  "name": "Ade_Technical_Analyst",
  "nodes": [
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $('Settings').item.json.sheet_url }}"
        },
        "sheetName": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $('Settings').item.json.sheet_url }}"
        },
        "columns": {
          "value": {
            "row_number": "={{ $('To email?').item.json.row_number }}",
            "first_emailed": "={{ $now.format('yyyy-MM-dd') }}"
          },
          "schema": [
            {
              "id": "email",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "email",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "first_emailed",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "first_emailed",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "name",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "name",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "company",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "company",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "type": "string",
              "display": true,
              "removed": false,
              "readOnly": true,
              "required": false,
              "displayName": "row_number",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "row_number"
          ]
        },
        "options": {}
      },
      "id": "dc9a0531-252c-425a-a810-65486402eb87",
      "name": "Update last contacted time",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        2464,
        912
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"emails\": [\n    {\n      \"message\": \"Hi {name}, hope you're well!<br />\\n<br />\\nYou're doing some great things at {company}, and I wanted to touch base to see if you wanted to chat.<br />\\n<br />\\nWould it make sense to jump on a quick call?<br />\\n<br />\\nRegards,<br />\\n<br />\\nNathan<br />\\n\",\n      \"send_on_day\": 0\n    },\n    {\n      \"message\": \"Hi {name},<br />\\n<br />\\nJust wanted to follow up on this, since it would be great to talk.<br />\\n<br />\\nRegards,<br />\\n<br />\\nNathan<br />\\n\",\n      \"send_on_day\": 3\n    },\n    {\n      \"message\": \"Just thought I'd give this one last try :)<br />\\n<br />\\nNathan\\n\",\n      \"send_on_day\": 8\n    }\n  ]\n}\n",
        "options": {}
      },
      "id": "543a40c3-6e91-4543-9f0c-4eecf3bf94e2",
      "name": "Email sequence",
      "type": "n8n-nodes-base.set",
      "position": [
        1072,
        912
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "resource": "thread",
        "returnAll": true,
        "filters": {
          "q": "=subject:{{ $json.subject }} after:{{ $now.minus({'days': $json.emails.last().send_on_day+1}).toSQL().substr(0, 10) }}"
        }
      },
      "id": "12a0af57-b691-4551-acd8-1efb21309048",
      "name": "Get previous message threads",
      "type": "n8n-nodes-base.gmail",
      "position": [
        1360,
        1392
      ],
      "typeVersion": 2.1,
      "webhookId": "1fa3acde-46dc-4dc8-b593-eab3c71d38e3"
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "get",
        "threadId": "={{ $json.id }}",
        "simple": false,
        "options": {}
      },
      "id": "b79d38d7-3086-4ea3-9a6e-dc4dc38a4ddb",
      "name": "Get thread details",
      "type": "n8n-nodes-base.gmail",
      "position": [
        1568,
        1392
      ],
      "typeVersion": 2,
      "webhookId": "76477750-6a47-4a38-a42f-09c025c86516"
    },
    {
      "parameters": {
        "jsCode": "// Because emails are sent slightly after the schedule trigger runs, we'll end up waiting an extra day to send unless we take into account the execution time of the workflow\nlet buffer_mins = 20\n\nlet templates = $('Email sequence').first().json.emails\n\nfunction next_sequence_number(messages, mail_id, sender_name) {\n  for (let i = 0; i < messages.length; i++) {\n    if(!('html' in messages[i])) return -1;\n    let in_campaign = messages[i].html.includes(\"data-cam='\"+mail_id+\"'\")\n    let valid_seq = messages[i].html.includes(\"data-seq='\"+i+\"'\")\n    let from_us = messages[i].From.includes(sender_name)\n    console.log(in_campaign + \", \" + valid_seq + \", \" + from_us)\n    if(!(from_us && in_campaign && valid_seq)) {\n      return -1;\n    }\n  }\n  return messages.length;\n}\n\n\nfor (const item of $input.all()) {\n  item.json.first_message_at = DateTime.fromMillis($('Get thread details').item.json.messages[0].internalDate*1)\n  item.json.days_since_first_message = DateTime.now().diff(item.json.first_message_at, 'days').days\n  item.json.next_sequence_number = next_sequence_number(\n    item.json.messages,\n    $('Settings').first().json.mail_id,\n    $('Settings').first().json.sender_name\n  );\n  item.json.next_message_due = (\n    item.json.next_sequence_number > 0\n    && item.json.next_sequence_number < templates.length\n    && templates[item.json.next_sequence_number].send_on_day <= item.json.days_since_first_message + (buffer_mins/60/24)\n  )\n\n  // Retrieve the placeholder values from the snippet, for use in future messages\n  const ph_matches = item.json.messages[0].snippet.match(/data-ph='([^']*)'/)\n  if(ph_matches?.length > 1) {\n    const placeholders = JSON.parse(ph_matches[1])\n    for(key of placeholders.keys()) {\n      item.json[key] = placeholders[key]\n    }\n  }\n\n}\n\nreturn $input.all();"
      },
      "id": "0d12d01f-cf6c-4751-837a-5c7b42c525bb",
      "name": "Classify threads",
      "type": "n8n-nodes-base.code",
      "position": [
        2016,
        1392
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "00cf6401-f45a-4496-803c-70a5b2d7daf5",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.next_message_due }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "fd5182c9-8283-49db-a4ba-2a3d198e1a34",
      "name": "Next message due?",
      "type": "n8n-nodes-base.filter",
      "position": [
        2240,
        1392
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "Follow-up is due if:\n- All the messages in the thread are automated (no-one has replied yet)\n- Enough time has passed for the next message to be sent",
        "height": 344.96230939963334,
        "width": 181.66573318934627,
        "color": 7
      },
      "id": "d217bf3a-8634-4d66-a7f3-51be710254bf",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1984,
        1200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "options": {}
      },
      "id": "faad350e-f293-4a3e-aa33-11b980c90470",
      "name": "Call message send sub-workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        2896,
        1392
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "message_template",
              "stringValue": "={{ $('Email sequence').first().json.emails[$json.next_sequence_number].message }}"
            },
            {
              "name": "reply_message_id",
              "stringValue": "={{ $json.messages.last().id }}"
            },
            {
              "name": "sender_name",
              "stringValue": "={{ $('Settings').item.json.sender_name }}"
            },
            {
              "name": "mail_id",
              "stringValue": "={{ $('Settings').item.json.mail_id }}"
            },
            {
              "name": "mail_seq",
              "stringValue": "={{ $json.next_sequence_number }}"
            },
            {
              "name": "to",
              "stringValue": "={{ $json.messages[0].To }}"
            }
          ]
        },
        "include": "none",
        "options": {}
      },
      "id": "e886ac21-2681-48fa-b8a6-cf5cb5a784bc",
      "name": "Prepare reply params",
      "type": "n8n-nodes-base.set",
      "position": [
        2464,
        1392
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "message_template",
              "stringValue": "={{ $('Email sequence').first().json.emails[0].message }}"
            },
            {
              "name": "to_email",
              "stringValue": "={{ $('Get emails').item.json[$('Settings').item.json.email_column_name] }}"
            },
            {
              "name": "subject",
              "stringValue": "={{ $('Settings').item.json.subject }}"
            },
            {
              "name": "sender_name",
              "stringValue": "={{ $('Settings').item.json.sender_name }}"
            },
            {
              "name": "mail_id",
              "stringValue": "={{ $('Settings').item.json.mail_id }}"
            },
            {
              "name": "mail_seq",
              "stringValue": "0"
            }
          ]
        },
        "options": {}
      },
      "id": "b071dac8-7949-4018-86e3-530e58907211",
      "name": "Prepare first message params",
      "type": "n8n-nodes-base.set",
      "position": [
        1808,
        912
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "content": "Columns the sheet needs\n- email\n- first_emailed (leave blank - will be filled in automatically)\n- Other columns matching placeholders in email sequence",
        "height": 410.4105111871959,
        "width": 181.66573318934627,
        "color": 7
      },
      "id": "2d65e39f-d4eb-4d64-b6c9-aa89cc209023",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1312,
        672
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "3afe7756-f580-4ea0-b07c-3c44193cd4f9",
      "name": "Call message send sub-workflow1",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        2240,
        912
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "eeec5901-5ff0-47b1-926b-e93097d64434",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.first_emailed.isEmpty() }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "9ac76f6c-b878-4b9e-a960-15abe54a0ebc",
      "name": "To email?",
      "type": "n8n-nodes-base.filter",
      "position": [
        1568,
        912
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// TODO: Some messages have an empty payload and a parts field instead (containing an array)\n\nfor (const item of $input.all()) {\n  for (const message of item.json.messages) {\n    console.log('message', message.payload.body.data || \"\")\n    let buffer = Buffer.from(message.payload.body.data || \"\", \"base64\");\n    message.html = buffer.toString(\"utf8\")\n  }\n}\n\nreturn $input.all();"
      },
      "id": "d56e42cb-67d6-4775-ae69-947e7d1da7bc",
      "name": "Decode messages",
      "type": "n8n-nodes-base.code",
      "position": [
        1808,
        1392
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const html = $('Decode messages').item.json.messages[0].html\nconst matches = html.match(/data-ph='([^']*)'/)\nlet placeholders = {}\nif(matches?.length > 0) {\n  ph = JSON.parse(matches[1])\n  for(k of Object.keys(ph)) {\n    placeholders[k] = ph[k]\n  }\n}\nitem.json.placeholders = placeholders\n\nreturn item;"
      },
      "id": "4955cf73-dbae-490d-982d-313332176097",
      "name": "Decode placeholder values",
      "type": "n8n-nodes-base.code",
      "position": [
        2688,
        1392
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function extractPlaceholders(str) {\n    // Regular expression to match placeholders\n    // It matches any alphanumeric character including dashes and underscores between {}\n    const regex = /\\{([a-zA-Z0-9_-]+)\\}/g;\n    \n    // Set to store unique placeholders\n    const uniquePlaceholders = new Set();\n\n    // Extract and store unique placeholders\n    let match;\n    while ((match = regex.exec(str)) !== null) {\n        uniquePlaceholders.add(match[1]);\n    }\n\n    // Convert the Set to an array and return\n    return Array.from(uniquePlaceholders);\n}\n\n\n// Gather all the placeholder values for passing on\nconst all_ph_raw = $('Email sequence').first().json.emails.flatMap(e => extractPlaceholders(e.message))\nconst all_ph = [...new Set(all_ph_raw)];\nlet placeholders = {}\nfor(ph of all_ph) {\n  if($('Get emails').item.json[ph] == undefined) throw new Error(`Message placeholder '{${ph}}' requires a column called '${ph}' in the Google Sheet`)\n  placeholders[ph] = $('Get emails').item.json[ph]\n}\n\nitem.json.placeholders = placeholders\n\nreturn item;"
      },
      "id": "00dd42c8-2305-4f3e-933d-b144dae7aecc",
      "name": "Package placeholder values",
      "type": "n8n-nodes-base.code",
      "position": [
        2016,
        912
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5e327a1d-3f2e-40f1-aaa1-9ce888349eb0",
              "name": "sheet_url",
              "type": "string",
              "value": "https://docs.google.com/spreadsheets/d/12dsbRpvtVFDdPmyZ7-39vuHuFpM1eMyfOqGGGdsnrtc/edit#gid=0"
            },
            {
              "id": "3255270a-3ac2-4c59-8215-ea79256b55cc",
              "name": "subject",
              "type": "string",
              "value": "My amazing campaign"
            },
            {
              "id": "76b40b74-acef-49f1-a0e2-0be9a461319a",
              "name": "sender_name",
              "type": "string",
              "value": "Nathan Automat"
            },
            {
              "id": "4532eb84-5ebc-4011-8c65-d97aeae21256",
              "name": "email_column_name",
              "type": "string",
              "value": "email"
            },
            {
              "id": "83de0ceb-39ec-426a-afba-13d66bce101d",
              "name": "mail_id",
              "type": "string",
              "value": "123456"
            }
          ]
        },
        "options": {}
      },
      "id": "cb9b770d-b681-4721-85d5-7459d54d07fb",
      "name": "Settings",
      "type": "n8n-nodes-base.set",
      "position": [
        848,
        912
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $('Settings').item.json.sheet_url }}"
        },
        "sheetName": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $('Settings').item.json.sheet_url }}"
        },
        "options": {}
      },
      "id": "f0b1a624-8a2d-42b4-b8e4-8812e246cc67",
      "name": "Get emails",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        1360,
        912
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "content": "## Send initial emails",
        "height": 515.1374038700677,
        "width": 1790.5345476157208,
        "color": 7
      },
      "id": "97dc698c-6ccc-4d53-ad66-e359293b7925",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1296,
        592
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Send follow-up emails if appropriate",
        "height": 515.1374038700677,
        "width": 1797.4980261229769,
        "color": 7
      },
      "id": "10f17378-87ce-4b23-bd89-18bc41b6587e",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1296,
        1136
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "triggerAtMinute": 12
            }
          ]
        }
      },
      "id": "f732d940-9f03-4c9e-963a-f6161f3eff58",
      "name": "Every hour",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        400,
        912
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "195ce0cf-9d25-4e02-9f20-aa6edbc2d561",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              },
              "leftValue": "={{ $now.isWeekend() }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "80cd3a84-c9da-47c5-a2b2-779cc9ebb8a1",
      "name": "Don't email on weekends",
      "type": "n8n-nodes-base.filter",
      "position": [
        608,
        912
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "# Try me out\n1. Clone [this Google worksheet](https://docs.google.com/spreadsheets/d/12dsbRpvtVFDdPmyZ7-39vuHuFpM1eMyfOqGGGdsnrtc/edit#gid=0) and update the 'Settings' node with its URL (plus change any other settings there you need to)\n2. Adjust the sequence of emails you want to send in the 'Email Sequence' node\n\nMake sure you set how many days after the previous email to wait before sending, and note that the emails are in HTML format.",
        "height": 418.96364526464185,
        "width": 404.04123613412946
      },
      "id": "752233da-a0d7-49de-8167-68beaba9e9ab",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        816,
        656
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "If reply_message_id is set, will reply to that message.\n\nOtherwise, will send a new message to the user in the 'email' field",
        "height": 306.5470605243249,
        "width": 181.66573318934627,
        "color": 7
      },
      "id": "449dd310-5d47-45d4-b57e-32638036da62",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2560,
        1712
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Sub-workflow for sending the emails\nThis is called by the sections above - you shouldn't need to touch it",
        "height": 515.1374038700677,
        "width": 1797.4980261229769,
        "color": 7
      },
      "id": "ec582d78-41c6-4170-ba26-31b75a68a730",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1296,
        1680
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "reply",
        "messageId": "={{ $json.reply_message_id }}",
        "message": "={{ $json.message }}",
        "options": {
          "senderName": "David Roberts"
        }
      },
      "id": "d4514de9-a095-4f11-8964-b6c9e4a4e43f",
      "name": "Reply to message",
      "type": "n8n-nodes-base.gmail",
      "position": [
        2816,
        1760
      ],
      "typeVersion": 2,
      "webhookId": "4c525b42-7548-4bee-bace-0a26ba5d3dd6"
    },
    {
      "parameters": {
        "sendTo": "={{ $json.to_email }}",
        "subject": "={{ $json.subject }}",
        "message": "={{ $json.message }}",
        "options": {
          "appendAttribution": false,
          "senderName": "={{ $json.sender_name }}"
        }
      },
      "id": "96aff615-91ae-4c90-b181-0caceb66fe22",
      "name": "Send new message",
      "type": "n8n-nodes-base.gmail",
      "position": [
        2816,
        1984
      ],
      "typeVersion": 2.1,
      "webhookId": "4ad02e39-c986-463a-89bf-8f33dbc251e7"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "dc8ec88f-daef-46be-b3da-1407d5e1c0b1",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.reply_message_id }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "8264f725-8654-4c60-99c4-ecee297e84c4",
      "name": "Replying?",
      "type": "n8n-nodes-base.if",
      "position": [
        2592,
        1872
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "0a82a1b4-4ad4-48b9-aea3-01a7e3b2b9b8",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        1712,
        1872
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "message",
              "stringValue": "=<span data-cam='{{ $json.mail_id }}' data-seq='{{ $json.mail_seq }}' data-ph='{{ JSON.stringify($json.placeholders) }}'></span>{{ $json.message }}"
            }
          ]
        },
        "options": {}
      },
      "id": "65bb0567-fdeb-41f0-bfc1-6ce3f6a97a55",
      "name": "Compose message",
      "type": "n8n-nodes-base.set",
      "position": [
        2368,
        1872
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function extractPlaceholders(str) {\n    // Regular expression to match placeholders\n    // It matches any alphanumeric character including dashes and underscores between {}\n    const regex = /\\{([a-zA-Z0-9_-]+)\\}/g;\n    \n    // Set to store unique placeholders\n    const uniquePlaceholders = new Set();\n\n    // Extract and store unique placeholders\n    let match;\n    while ((match = regex.exec(str)) !== null) {\n        uniquePlaceholders.add(match[1]);\n    }\n\n    // Convert the Set to an array and return\n    return Array.from(uniquePlaceholders);\n}\n\nlet placeholders = Object.keys(item.json.placeholders)\nconsole.log(placeholders)\n\n// Substitute all the placeholders in the message\n  item.json.message = item.json.message_template\n  for (let key of extractPlaceholders(item.json.message_template)) {\n    if(!placeholders.includes(key)) throw new Error(`Missing data for placeholder '{${key}}'`)\n    const regex = new RegExp(`\\\\{${key}\\\\}`, 'g'); // Create a regex to match the exact word surrounded by {}\n    item.json.message = item.json.message.replaceAll(regex, item.json.placeholders[key]);\n  }\n\nreturn item"
      },
      "id": "7f4b29f8-bc67-459e-a33e-95a9e614a0f9",
      "name": "Fill message placeholders",
      "type": "n8n-nodes-base.code",
      "position": [
        2160,
        1872
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "message_template",
              "stringValue": "={{ $('Email sequence').first().json.emails[0].message }}"
            },
            {
              "name": "email",
              "stringValue": "david@thedavid.co.uk"
            },
            {
              "name": "name",
              "stringValue": "Daffyd"
            },
            {
              "name": "company",
              "stringValue": "Davey Enterprises"
            },
            {
              "name": "subject",
              "stringValue": "={{ $('Settings').item.json.subject }}"
            },
            {
              "name": "sender_name",
              "stringValue": "={{ $('Settings').item.json.sender_name }}"
            },
            {
              "name": "mail_id",
              "stringValue": "={{ $('Settings').item.json.mail_id }}"
            },
            {
              "name": "mail_seq",
              "stringValue": "0"
            }
          ]
        },
        "include": "none",
        "options": {}
      },
      "id": "2558702b-eceb-4c0a-807a-fa3db8192526",
      "name": "Set message template",
      "type": "n8n-nodes-base.set",
      "position": [
        1920,
        1872
      ],
      "typeVersion": 3.2,
      "disabled": true
    }
  ],
  "pinData": {},
  "connections": {
    "Settings": {
      "main": [
        [
          {
            "node": "Email sequence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "To email?": {
      "main": [
        [
          {
            "node": "Prepare first message params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Every hour": {
      "main": [
        [
          {
            "node": "Don't email on weekends",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get emails": {
      "main": [
        [
          {
            "node": "To email?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email sequence": {
      "main": [
        [
          {
            "node": "Get previous message threads",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decode messages": {
      "main": [
        [
          {
            "node": "Classify threads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify threads": {
      "main": [
        [
          {
            "node": "Next message due?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Next message due?": {
      "main": [
        [
          {
            "node": "Prepare reply params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get thread details": {
      "main": [
        [
          {
            "node": "Decode messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare reply params": {
      "main": [
        [
          {
            "node": "Decode placeholder values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Don't email on weekends": {
      "main": [
        [
          {
            "node": "Settings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decode placeholder values": {
      "main": [
        [
          {
            "node": "Call message send sub-workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Package placeholder values": {
      "main": [
        [
          {
            "node": "Call message send sub-workflow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get previous message threads": {
      "main": [
        [
          {
            "node": "Get thread details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare first message params": {
      "main": [
        [
          {
            "node": "Package placeholder values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call message send sub-workflow1": {
      "main": [
        [
          {
            "node": "Update last contacted time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replying?": {
      "main": [
        [
          {
            "node": "Reply to message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send new message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Set message template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compose message": {
      "main": [
        [
          {
            "node": "Replying?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fill message placeholders": {
      "main": [
        [
          {
            "node": "Compose message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set message template": {
      "main": [
        [
          {
            "node": "Fill message placeholders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "94060fd9-28f0-43ba-aae9-c02a8c73200c",
  "meta": {
    "instanceId": "d65af402cf4618f1686cfbe2122be5f50c690cd4a445a551ee33fc92dd1f710d"
  },
  "id": "Q3j3QJeOLUec3pCd",
  "tags": []
}